"""杨辉三角"""
"""
[设计思路]
    杨辉三角的特点:
1、 第i行有i个数
2、 每行的第一个数和最后一个数都是1
3、 每行除了第一个数和最后一个数，其余各数都是其两肩上的数之和
    如果将所有的数存在一个二维列表L中，则有:
[[1],
    [1, 1]
    [1, 2, 1]
    [1, 3, 3, 1]
    [1, 4, 6, 4, 1]
    [1, 5, 10, 10, 5, 1]
    [1, 6, 15, 20, 15, 6, 1]
    [1, 7, 21, 35, 35, 21, 7, 1]
    [1, 8, 28, 56, 70, 56, 28, 8, 1]]
    
        假设要打印n行，
        对于特点2，则有:
        L[i][0] = L[i][i] = 1 (i = 0, 1, 2, ..., n - 1)
        对于特点3，则有:
        当j != 0 且 j != i 时，L[i][j] = L[i - 1][j - 1] + L [i - 1][j]
        
        首先，初始化一个所有元素都为1的n行二维列表，第i行有i个数
        然后，根据上述特点3的条件和公式更新二维列表，对杨辉三角中不为1的位置进行更新
        最后，根据杨辉三角的格式打印二维列表
            打印每行的内容前，先打印一定数量的水平制表符，第i行打印n - i个
            打印每行的内容时，除最后一个数之外，每打印一个数之后打印两个水平制表符
            对于每行的最后一个数，打印之后换行，准备打印下一行
            
        
"""

# 首先，初始化一个所有元素都为1的n行二维列表，第i行有i个数
L = [[1 for j in range(i + 1)] for i in range(9)]
# [[1], [1, 1], [1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]]
# print(L)
# import pprint
# pprint.pprint(L)

# 然后，对杨辉三角中不为1的位置进行更新
for i in range(2, 9):
    for j in range(i + 1):
        # 每行除了第一个数和最后一个数，其余各数都是其两肩上的数之和
        if j != 0 and j != i:
            L[i][j] = L[i - 1][j - 1] + L[i - 1][j]

# pprint.pprint(L)

# 最后，根据杨辉三角的格式打印二维列表
for i in range(9):
    # 打印每行的内容前，先打印一定数量的水平制表符，第i行打印n - i个
    print('\t' * (8 - i), end='')
    # 打印每行的内容时，每打印一个数之后打印两个水平制表符
    for j in range(i + 1):
        # 除最后一个数之外
        if j != i:
            # 每打印一个数之后打印两个水平制表符
            print('%d\t\t' % L[i][j], end='')
        # 对于每行的最后一个数，
        else:
            # 打印之后换行，准备打印下一行
            print('%d' % L[i][j])

"""
运行结果:
								1
							1		1
						1		2		1
					1		3		3		1
				1		4		6		4		1
			1		5		10		10		5		1
		1		6		15		20		15		6		1
	1		7		21		35		35		21		7		1
1		8		28		56		70		56		28		8		1
"""
